// 설치 명령어
// npm i -D typescript ts-node @types/node

// tsconfig.json만들기
// tsc --init

// 설치 명령어

// npm i -D tsconfig-paths

// 우리가 필요한 모듈 설치

// 머클루트와 해시값이 필요하므로 crypto-js, merkle 설치
// npm i crypto-js merkle

// typescript 는 외부 사용 모듈을 사용할 경우 타입 정의 파일이 필요.
// crypto-js merklec

// npm i --save -dev @types/crypto-js
// npm i --save -dev @types/merkle

// typeScript로 블록체인을 만들어봤는데 객체지향적인 방법으로 코드를 작성하고
// OOP(객체 지향 프로그래밍)

// OOP는 프로그램의 설계방법 개념의 하나이다.

// OOP는 프로그램을 단순히 실행 데이터 처리 방법만이 아니라
// 수많은 객체라는 단위를 만들어서 이 객체를 가지고 동작하는 상호작용을 서술한 방식이다.
// OOP에서 객체는 하나의 역학ㄹ을 수행하는 함수와 변수들의 묶음 데이터로 보면 된다.

// 이런 객체지향 프로그래밍은 프로그램을 만들 때 제일 작은 단위부터 만들어가는 방식을 선호함
// 근데 그러면 작성된 코드들의 테스트가 어렵다는 단점이 있고 그래서 이런 부분 때문에 라이브러리를 사용해서
// 테스트 한다.

// 그냥 개발이 아니라 테스트 코드를 작성하면서 개발해나가는게
// TDD(Test_Driven Development) 기법

// 그래서 우리도 테스트 해보려고 Jest라는 애를 써보자

// ----------------------------------------------------------
// npm i -D ts-jest @types/jest babel-core
// npm i -D @babel/preset-typescript @babel/preset-env
// ----------------------------------------------------------

// 체인 만들기

// block 클래스로 만들 블록들을 체인으로 연결시켜줄 chain 클래스를 만들어보자
// chain 클래스에는 생성한 블록을 배열로 담아서 블록체인을 만들 예정
// 이미 지금 우리가 만든 블록은 블록의 속성으로 체이닝이 이뤄지고 있는데
// 이전 블록 해시 값을 속성으로 가지고 있기 때문에 특정 블록기준으로 이전 블록 해시 값이 달라지면
// 현재 블록의 이전 해시값과 불일치가 발생하여 연결 고리가 끊김
// chain 클래스를 따로 만들어서 생성된 블록을 하나의 배열안에 담아주는 역할을 할 예정

// 이렇게 하는 이유는 이후에 우리가 마이닝 할때 난이도 계산을 하기 위해서.

// 작업 증명 역사
// 작업증의 기본 개념은 1993 년도에 고안 됐고
// 1997년 영국의 암호학자인 애덤백의 해시캐시고 이후에 2009년 이 기술은
// 사토시 나카모토

// 해시캐시는 대량으로 스팸메일을 방지하고자 고안된 것
// 이메일을 보내기 위해서 작업증명 알고리즘을 이용해서 해시값을 찾고
// 그 보상으로 발행되는 우표 같은.
// 이 과정이 시간과 비용 많이 들고 대량 발생되는 스팸메일을 막을 수 있는 방법으로 이 방식으로
// 사용 했다 .

// 작업증명 방식은 거래가 발생하면 해당 거래가 유용한지에 대한 합의 검증 방식

// 논스값을 이제 사용하고

// 간단히 설명

// 작업증명은 어려운 수학문제 푸는것 이라 생각
// 채굴
// 작업 증명을 하는것이 채굴이라 볼 수 있음
// 어려운 수학 문제를 풀게하고 푼사람들한테 보상 주는거

// 여기서 특정 조건을 만족하는 논스값을 찾는거 ? 

// 블록체인 상의 모든 참여자는 동일한 순서로 블록을 연결하기 위해서
// 합의 알고리즘이 필요하며
// 대표적인 합의 알고리즘은 POW,POS,DPOS,POA등이 있다.

// "작업증명방식" 은 POW는 목표값 이하 해시 값을 찾는 해시넷 참조

// 작업 증명 알고리즘의 필요성은 네트워크 상의 모든 노드가 동시에 블록을 만들 수 없게 하는 것.
// 작업증명을 통과해야만 새로운 블록을 추가 생성 할 수 있게 된다는 점

// 작업증명 알고리즘은 Difficulty 조절 알고리즘을 이용해서 약 10분당 1개의 블록이 생성되는것을 보장하게 됌
