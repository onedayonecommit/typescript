// private network
// 가상 사설망 이란 뜻
// 회사 조직에서 독립적으로 사용하는 네트워크
// geth 로 사용
// Looking for peers 이더리움 네트워크 상 다른 노드와 peer를 맺어 주기 위해 
// peer 맺으면 이더리움 네트워크 상에 있는 데이터들을 로컬에 다운 받을 수 있다. 
// 다운 내용은
// MacOs는 ~/Library/Ethereum

// 기본적으로 chaindata 폴더와 keystore 폴더를 확인해보면
// chaindata 폴더 : 블록 헤더 내용, 블록의 바디 트랜잭션 내용이 들어있다. 
// keystore 폴더 : geth 에서 관리하는 계정들의 정보가 들어있다.

// 이런 내용을 geth로 다운 받는 것을 동기화라고 부르고

// full sync, fast sync, ligth sync 이렇게 3가지가 있고
// full sync : 제네시스 블록부터 지금 현재블록까지 모든 블록을 동기화

// geth --syncmode light

// IPC 프라이빗 네트워크를 구축하면서 IPC 개념을 알고
// IPC는 프로세스 간 통신
// 프로세스끼리 서로 데이터를 전송 수신 하는 행위 또는 그 방법을 말하는 것

// IPC 의 종류
// 메시지 전달, 메모리 공유

// 메시지 전달은 커널이 제공하는 api 를 사용해서 커널 공간을 통해서 통신하고
// 소켓 로컬에서도 통신이 가능하다. 

// 메모리 공유
// 프로세스끼리 공통의 메모리 영역을 공유하고 상호간 통신 하는 방법
// 데이터 자체를 공유하도록 지원한다. 

// 간단하게 IPC는 실행중인 프로세스 간에 데이터를 주고 받는것
// 프로세스는 할당된 메모리 내의 정보에만 접근 할 수 있게 해주고
// 이를 벗어나서 접근할 경우 오류를 발생 시키는데
// 안정성을 위해서 운영 체제가 자기 프로세스의 메모리에만 접근하도록
// 하고 있기 때문에 이런 부분들 때문에 우리가 IPC 를 사용해서
// 다른 프로세스 간에 데이터를 주고 받아야함

// geth attach ~/Library/Ethereum/geth.ipc

// 자바스크립트 콘솔창에 접속이 되고 go언어로 만들어둠
// 자바스크립트로 호출 해서 사용할 수 있게끔 만들어 놓은 것.

// personal == 속상과 메소드 등 전부 보임

// admin
// 1. admin.nodeinfo : 노드의 정보 조회
// 2. admin.nodeinfo.enode : enode 값을 이용해서 peer를 맺는
// 3. admin.datadir : admin 관련 데이터 폴더 경로

